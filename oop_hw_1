class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def __str__(self):
        list_grades = [list_grades for all_grades in self.grades.values() for list_grades in all_grades]
        return f"Имя: {self.name}\nФамилия: {self.surname}\nСредняя оценка за домашние задания: {sum(list_grades)/len(list_grades)}\nКурсы в процессе изучения: {', '.join(self.courses_in_progress)}\nЗавершенные курсы: {', '.join(self.finished_courses)}\n"

    def __eq__(self, other):
        self.list_grades = [list_grades for all_grades in self.grades.values() for list_grades in all_grades]
        other.list_grades = [list_grades for all_grades in other.grades.values() for list_grades in all_grades]
        return sum(self.list_grades)/len(self.list_grades) == sum(other.list_grades)/len(other.list_grades)

    def __lt__(self, other):
        self.list_grades = [list_grades for all_grades in self.grades.values() for list_grades in all_grades]
        other.list_grades = [list_grades for all_grades in other.grades.values() for list_grades in all_grades]
        return sum(self.list_grades)/len(self.list_grades) < sum(other.list_grades)/len(other.list_grades)

    def rate_lect(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress and grade in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'


def total_hw_grade(students, course):
    hw_grades = []
    for student in students:
        if course in student.grades:
            hw_grades.extend(student.grades[course])
    return sum(hw_grades)/len(hw_grades)


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def __str__(self):
        list_grades = [list_grades for all_grades in self.grades.values() for list_grades in all_grades]
        return f"Имя: {self.name}\nФамилия: {self.surname}\nСредняя оценка за лекции: {sum(list_grades)/len(list_grades)}\n"

    def __eq__(self, other):
        self.list_grades = [list_grades for all_grades in self.grades.values() for list_grades in all_grades]
        other.list_grades = [list_grades for all_grades in other.grades.values() for list_grades in all_grades]
        return sum(self.list_grades)/len(self.list_grades) == sum(other.list_grades)/len(other.list_grades)

    def __lt__(self, other):
        self.list_grades = [list_grades for all_grades in self.grades.values() for list_grades in all_grades]
        other.list_grades = [list_grades for all_grades in other.grades.values() for list_grades in all_grades]
        return sum(self.list_grades)/len(self.list_grades) < sum(other.list_grades)/len(other.list_grades)


def total_lect_grade(lecturers, course):
    lect_grades = []
    for lecturer in lecturers:
        if course in lecturer.grades:
            lect_grades.extend(lecturer.grades[course])
    return sum(lect_grades)/len(lect_grades)


class Reviewer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)

    def __str__(self):
        return f"Имя: {self.name}\nФамилия: {self.surname}\n"

    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress and grade in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'



student1 = Student('Roy', 'Eman', 'your_gender')
student1.courses_in_progress += ['Python', 'Java']
student1.finished_courses = ['C++']
student2 = Student('John', 'Smith', 'non_binary_gender')
student2.courses_in_progress += ['Java']
student2.finished_courses = []
student3 = Student('Paul', 'Broun', 'unknown_gender')
student3.courses_in_progress += ['C++']
student3.finished_courses = ['Java']
students = [student1, student2, student3]

reviewer1 = Reviewer('Some', 'Buddy')
reviewer1.courses_attached += ['Python', 'C++', 'Java']
reviewer2 = Reviewer('Another', 'Buddy')
reviewer2.courses_attached += ['Java', 'Python', 'C++']
reviewer3 = Reviewer('Onemore', 'Buddy')
reviewer3.courses_attached += ['Java', 'Python', 'C++']

lecturer1 = Lecturer('Bill', 'Gates')
lecturer1.courses_attached += ['Python', 'C++', 'Java']
lecturer2 = Lecturer('Steve', 'Jobs')
lecturer2.courses_attached += ['Java', 'C++']
lecturer3 = Lecturer('Mark', 'Zukerberg')
lecturer3.courses_attached += ['Java', 'Python']
lecturers = [lecturer1, lecturer2, lecturer3]

reviewer1.rate_hw(student1, 'Python', 9)
reviewer2.rate_hw(student2, 'Java', 5)
reviewer2.rate_hw(student1, 'Java', 7)
reviewer3.rate_hw(student3, 'C++', 10)
reviewer3.rate_hw(student2, 'Java', 8)

student1.rate_lect(lecturer1, 'Python', 10)
student2.rate_lect(lecturer2, 'Java', 9)
student3.rate_lect(lecturer2, 'C++', 6)
student2.rate_lect(lecturer2, 'Java', 6)
student3.rate_lect(lecturer3, 'C++', 8)
student3.rate_lect(lecturer1, 'Java', 2)
student1.rate_lect(lecturer3, 'C++', 7)


print(lecturer1)
print(lecturer2)
print(student1)
print(student2)
print(student3)

print(student1 > student2)
print(lecturer1 < lecturer2)
